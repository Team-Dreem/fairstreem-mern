{"version":3,"sources":["utils/queries.js","components/SearchCard/index.js","utils/actions.js","utils/reducers.js","utils/GlobalState.js","components/SearchResults/index.js","utils/helpers.js","components/GenreMenu/index.js","components/Search/index.js","pages/Home.js","assets/spinner.gif","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/SongCard/index.js","components/SongTableSimple/index.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","components/CommentForm/index.js","components/CommentList/index.js","components/LikeButton/index.js","pages/ArtistProfile.js","pages/SongDetail.js","App.js","serviceWorker.js","index.js"],"names":["gql","QUERY_SONGS","QUERY_GENRES","QUERY_CHECKOUT","QUERY_USER","QUERY_ARTISTS","QUERY_ARTIST_BY_GENRE","QUERY_SEARCH","useStyles","makeStyles","root","maxWidth","height","media","SearchCard","data","classes","Card","className","CardActionArea","CardMedia","image","avatar","CardContent","Typography","gutterBottom","variant","component","artistName","UPDATE_GENRES","UPDATE_ARTISTS","UPDATE_SONGS","UPDATE_CURRENT_ARTIST","UPDATE_CURRENT_SONG","UPDATE_SEARCH_TERM","UPDATE_SEARCH_LOADING","UPDATE_SEARCH_RESULTS","UPDATE_SEARCH_GENRE","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","reducer","state","action","type","artists","songs","genres","currentGenre","currentArtist","currentUser","currentSong","cartOpen","cart","song","newState","filter","_id","length","map","purchaseQuantity","searchTerm","searchGenre","loading","genre","searchResults","results","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","theme","flexGrow","SearchResults","CircularProgress","Grid","container","spacing","result","item","sm","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","GenreMenu","useQuery","genreData","useEffect","forEach","then","ButtonGroup","aria-label","Button","name","onClick","Search","timeoutId","apolloClient","useApolloClient","updateSearchTerm","term","clearTimeout","setTimeout","query","variables","r","artistsByGenre","search","onChange","onCancelSearch","Home","CartItem","src","alt","title","price","placeholder","target","parseInt","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","songIds","i","push","Detail","id","useParams","useState","setCurrentSong","find","indexedSongs","to","description","itemInCart","cartItem","disabled","p","controls","song_url","spinner","Jumbotron","children","style","clear","paddingTop","textAlign","NoMatch","LOGIN","ARTIST_LOGIN","ADD_ORDER","ADD_USER","ADD_ARTIST","ADD_FOLLOW","ADD_FOLLOWER","Login","email","password","accountType","formState","setFormState","useMutation","login","error","artistLogin","handleFormSubmit","event","preventDefault","acctType","mutationResponse","handleChange","onSubmit","htmlFor","Signup","username","bio","picture","social","color","addUser","addArtist","socialMedia","Styles","display","padding","margin","details","flexDirection","content","flex","cover","width","alignItems","paddingLeft","paddingBottom","playIcon","button","SongCard","tags","useTheme","IconButton","direction","table","minWidth","SongTableSimple","filterSongs","artistId","artistSongs","buyClick","playClick","rows","playBtn","album","playcount","purchase","TableContainer","Paper","Table","TableHead","align","TableRow","TableCell","TableBody","row","Nav","href","logout","OrderHistory","user","firstName","lastName","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","songData","saveOrder","CommentForm","commentText","setText","characterCount","setCharacterCount","xs","bullet","transform","fontSize","pos","marginBottom","CommentList","CardActions","size","LikeButton","listenerId","getProfile","addFollow","addFollower","userId","addFollowFunction","addFollowerFunction","ArtistProfile","artist","indexedArtists","justify","md","SongDetail","songId","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f95f3b6f.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      avatar\n      username\n      firstName\n      lastName\n      email\n      followCount\n      follows {\n        _id\n        username\n      }\n      orders {\n        songs {\n          _id\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_SONGS_BY_GENRE = gql`\n  query getSongs($genre: ID) {\n    songs(genre: $genre) {\n      _id\n      title\n      artistId\n      artistName\n      album\n      description\n      image\n      price\n      genre {\n        _id\n      }\n      tags\n      song_url\n    }\n  }\n`;\n\nexport const QUERY_SONGS = gql`\n  query songs {\n    songs {\n      _id\n      title\n      artistId\n      artistName\n      album\n      description\n      image\n      price\n      genre {\n        _id\n      }\n      tags\n      song_url\n    }\n  }\n`;\n\nexport const QUERY_ALL_SONGS = gql`\n  {\n    songs {\n      _id\n      title\n      description\n      price\n      song_url\n      genre {\n        name\n      }\n      tags \n      song_url\n    }\n  }\n`;\n\nexport const QUERY_GENRES = gql`\n{\n  genres {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($songs: [ID]!) {\n    checkout(songs: $songs) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    avatar\n    username\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      songs {\n        _id\n        title\n        artist\n        description\n        price\n        image\n      }\n    }\n  }\n}\n`;\n\n// export const QUERY_ARTISTS = gql`\n//   query getArtists($_id: ID){\n//     artists(_id: $_id) {\n//       _id\n//       avatar\n//       artistName\n//       email\n//       password\n//       genre\n//       bio\n//       socialMedia\n//       songs {\n//         _id\n//         title\n//       }\n//       followers {\n//         _id\n//         username\n//       }\n//     }\n//   }\n// `;\n\nexport const QUERY_ARTISTS = gql`\n  query artists {\n    artists {\n      _id\n      avatar\n      artistName\n      email\n      password\n      genre\n      bio\n      website\n      socialMedia\n      songs {\n        _id\n        title\n      }\n      followers {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const QUERY_ARTIST_BY_GENRE = gql`\n  query GetArtistsByGenre($genre: String) {\n    artistsByGenre(genre: $genre) {\n      artistName,\n      avatar,\n      _id,\n      genre\n    }\n  }\n`;\n\nexport const QUERY_SEARCH = gql`\n  query Search($term: String!) {\n    search(term: $term) {\n      artistName,\n      avatar,\n      _id,\n      genre\n    }\n  }\n`;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        height: \"100%\"\n    },\n    media: {\n        height: 140,\n    },\n});\n\nfunction SearchCard({ data }) {\n    const classes = useStyles();\n\n    return (\n        <Card className={classes.root}>\n            <CardActionArea>\n                <CardMedia\n                    className={classes.media}\n                    image={data.avatar}\n                />\n                <CardContent>\n                    <Typography className=\"artist-name\" gutterBottom variant=\"h5\" component=\"h2\">\n                        { data.artistName }\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    );\n}\n\nexport default SearchCard;","export const UPDATE_GENRES = \"UPDATE_GENRES\";\nexport const UPDATE_ARTISTS = \"UPDATE_ARTISTS\";\nexport const UPDATE_USERS= \"UPDATE_USERS\";\nexport const UPDATE_SONGS = \"UPDATE_SONGS\";\nexport const UPDATE_CURRENT_GENRE = \"UPDATE_CURRENT_GENRE\";\nexport const UPDATE_CURRENT_ARTIST = \"UPDATE_CURRENT_ARTIST\";\nexport const UPDATE_CURRENT_USER = \"UPDATE_CURRENT_USER\";\nexport const UPDATE_CURRENT_SONG = \"UPDATE_CURRENT_SONG\";\nexport const UPDATE_SEARCH_TERM = \"UPDATE_SEARCH_TERM\";\nexport const UPDATE_SEARCH_LOADING = \"UPDATE_SEARCH_LOADING\";\nexport const UPDATE_SEARCH_RESULTS = \"UPDATE_SEARCH_RESULTS\";\nexport const UPDATE_SEARCH_GENRE = \"UPDATE_SEARCH_GENRE\";\n\n\n// With these three actions, we're defining how three parts of our state will be maintained and updated:\n\n//UPDATE_SONGS is used by the SongList component. Right now, we're getting all of our song data from the server, and Apollo caches the results. This is great for performance, but it also means we have to go through Apollo every time we want to update that list. The end goal here is to store the data retrieved for songs by Apollo in this global state. This way, we can add offline capabilities later and persist our song data!\n\n//UPDATE_GENRES works a lot like UPDATE_SONGS in that we want to take the list of genres retrieved from the server by Apollo and store it in this global state. Again, this will allow us to easily add offline capabilities at a future point in this project.\n\n//UPDATE_CURRENT_GENRE is sort of the connecting piece of data for the previous two actions we created, in that we want to be able to select a genre from the state created by the UPDATE_GENRES action and display songs for that genre from the list we create from the UPDATE_SONGS action.\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","import {\n  UPDATE_GENRES,\n  UPDATE_ARTISTS,\n  // UPDATE_USERS,\n  UPDATE_SONGS,\n  UPDATE_CURRENT_GENRE,\n  UPDATE_CURRENT_ARTIST,\n  UPDATE_CURRENT_USER,\n  UPDATE_CURRENT_SONG,\n  UPDATE_SEARCH_TERM,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART,\n  UPDATE_SEARCH_LOADING,\n  UPDATE_SEARCH_RESULTS,\n  UPDATE_SEARCH_GENRE\n} from \"./actions\";\n\nimport { useReducer } from \"react\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_ARTISTS:\n      return {\n        ...state,\n        artists: [...action.artists],\n      };\n    // if action type value is the value of `UPDATE_SONGS`, return a new state object with an updated songs array\n    case UPDATE_SONGS:\n      return {\n        ...state,\n        songs: [...action.songs],\n      };\n    // if action type value is the value of `UPDATE_GENRES`, return a new state object with an updated genres array\n    case UPDATE_GENRES:\n      return {\n        ...state,\n        genres: [...action.genres],\n      };\n    case UPDATE_CURRENT_GENRE:\n      return {\n        ...state,\n        currentGenre: action.currentGenre\n      };\n      case UPDATE_CURRENT_ARTIST:\n      return {\n        ...state,\n        currentArtist: { ...action.currentArtist },\n      };\n      case UPDATE_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: { ...action.currentUser },\n      };\n      case UPDATE_CURRENT_SONG:\n      return {\n        ...state,\n        currentSong: { ...action.currentSong },\n      };\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.song],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.songs],\n      };\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((song) => {\n        return song._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((song) => {\n          if (action._id === song._id) {\n            song.purchaseQuantity = action.purchaseQuantity;\n          }\n          return song;\n          // Why did we need to use the map() method to create a new array instead of updating state.cart directly?\n\n          // Answer: The original state should be treated as immutable.\n        }),\n      };\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n    case UPDATE_SEARCH_TERM:\n      return {\n        ...state,\n        searchTerm: action.searchTerm,\n        searchGenre: null\n      };\n    case UPDATE_SEARCH_LOADING:\n      return {\n        ...state,\n        loading: action.loading\n      };\n    case UPDATE_SEARCH_GENRE:\n      return {\n        ...state,\n        searchTerm: '',\n        searchGenre: action.genre\n      };\n\n    case UPDATE_SEARCH_RESULTS:\n      return {\n        ...state,\n        loading: false,\n        searchResults: action.results\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport function useAppReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n","import React, { createContext, useContext } from \"react\";\nimport { useAppReducer } from \"./reducers\";\n// createContext will be used to instantiate a new Context object. The more meaningful term we can use here is that we're using it to create the container to hold our global state data and functionality so we can provide it throughout our app!\n\n// useContext is another React Hook that will allow us to use the state created from the createContext function.\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n// Every Context object comes with two components, a Provider and Consumer. The Provider is a special type of React component that we wrap our application in so it can make the state data that's passed into it as a prop available to all other components. The Consumer is our means of grabbing and using the data that the Provider holds for us.\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useAppReducer({\n    genres: [],\n    artists: [],\n    songs: [],\n    cart: [],\n    cartOpen: false,\n    currentGenre: {},\n    currentArtist: {},\n    currentUser: {},\n    currentSong: {},\n    loading: false,\n    searchGenre: null,\n    searchResults: null,\n    searchTerm: ''\n  });\n  // use this to confirm it works!\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n// With this function, StoreProvider, we instantiate our initial global state with the useAppReducer() function we created earlier. Because that wraps it around the useReducer() Hook from React, every time we run this useAppReducer() function, we receive the following two items in return:\n\n// state is the most up-to-date version of our global state object.\n\n// dispatch is the method we execute to update our state. It is specifically going to look for an action object passed in as its argument, as we'll soon see.\n\n// After the useAppReducer() completes and provides us with the new state and function to update state (e.g., dispatch), we then return the StoreContext's <Provider> component with our state object and dispatch the function provided as data for the value prop.\n\n// With all of this in place, the StoreProvider function isn't as much of a function as it is our own custom <Provider> component! That's why the parameters defined at the top, the value and ...props, are there. It's actually set up to accept props if it needs to, and it does!\n\n// The value prop is good to have included, as it opens us up to pass in more data for state if we need to. We don't actually need to in this app, but it makes this provider flexible. The other prop, or rather ...props, is in place to handle any other props the user may need. Namely, we'll need to use props.children, as this <StoreProvider> component will wrap all of our other components, making them children of it. If we didn't include {...props} in our returning <Provider> component, nothing on the page would be rendered!\n\n// This is a lot to take in, and it takes some developers years to grasp it and put it to use. But in short, what we did here was create our own functionality to manage state at a global level and make it available to all of our other components through a special <Provider> component. The last thing we need to do is create the custom function using the useContext() Hook to be used by the components that actually need the data our <StoreProvider> will be, well . . . providing!\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n// We just created our own custom React Hook! When we execute this function from within a component, we will receive the [state, dispatch] data our StoreProvider provider manages for us. This means that any component that has access to our StoreProvider component can use any data in our global state container or update it using the dispatch function.\n\nexport { StoreProvider, useStoreContext };\n","import React from 'react';\nimport { Grid } from \"@material-ui/core\";\nimport SearchCard from \"../SearchCard\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useStoreContext } from '../../utils/GlobalState';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1\n    }\n}))\n\nfunction SearchResults() {\n    const classes = useStyles();\n    const [state] = useStoreContext();\n    const { loading, searchResults: results } = state;\n\n    if (loading) {\n        return <CircularProgress className=\"loader\"/>\n    } else if (results) {\n        if (results.length) {\n            return (\n                <div className={classes.root + ' grid'}>\n                    <Grid container spacing={2}>\n                        { results.map(result => <Grid item sm={3} key={ result._id }>\n                            <SearchCard data={result} />\n                            </Grid>)}\n                    </Grid>\n            </div>\n            );\n        } else {\n            return <p className=\"no-result\">No results found.</p>;\n        }\n    } else {\n        return null;\n    }\n}\n\nexport default SearchResults;","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + \"s\";\n}\n\n// Before we fill out the actual IndexedDB portion of this function (below), let's consider how we'll set this up and use it. Remember, IndexedDB is asynchronous and event driven. This means that if we want it to be on and listening all the time, we'll have to write a lot of what-if type functionality to handle all of the moving parts.\n\n// Instead, we'll use one function that opens the database connection, creates the object store (if it's the first time using it on the machine), and runs whatever transaction we need to have run on a successful connection. So when we call the function, we'll open the connection to the database and then connect to the object store that we pass in as storeName. Then we'll perform a transaction, using the method and object values to help carry it out. We also wrap the whole thing in a Promise, making it a lot easier to work with IndexedDB's asynchronous nature.\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `fairstreem` with the version of 1\n    const request = window.indexedDB.open(\"fairstreem\", 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore(\"songs\", { keyPath: \"_id\" });\n      db.createObjectStore(\"genres\", { keyPath: \"_id\" });\n      db.createObjectStore(\"cart\", { keyPath: \"_id\" });\n      db.createObjectStore(\"artists\", { keyPath: \"_id\" });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log(\"There was an error\");\n    };\n\n    // on database open success\n    // With this functionality in place, when the database connection opens successfully, we immediately save a reference of the database to the db variable. Then we open a new transaction using the .transaction() method, passing in the object store that we want to interact with and the permissions we want in this transaction. The storeName—one of the three stores we created for the database—will be passed in as an argument in the idbPromise() function when we call it from a component. We'll save a reference to that object store so that we can perform a CRUD method on it to read, write, or update the data. Then we set up two more event listeners, one for errors and one for closing the connection to the database when we're done.\n\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, \"readwrite\");\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log(\"error\", e);\n      };\n\n      switch (method) {\n        case \"put\":\n          store.put(object);\n          resolve(object);\n          break;\n        case \"get\":\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case \"delete\":\n          store.delete(object._id);\n          break;\n        default:\n          console.log(\"No valid method\");\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\n\n// So now whenever we run this idbPromise() function, we establish a connection to the database. Remember that with IndexedDB, the .onupgradeneeded() event only runs if the browser notices that the version number in the .open() method has changed since the last time, or if the browser has never connected to the database before and 1 is the new version. Any other time this code executes and the version is still 1, the .onupgradeneeded() will not run.\n\n// This is good, though, because we only need to create the three object stores once. For each of them, we provide a name of the object store and the keyPath name. Last time, we simply let them use their built-in auto increment features. But now, we'd like to provide the actual index value we want to use for looking up data. Because that index value will be the MongoDB _id property for each song or genre, it makes sense to set the keyPath name to _id.\n","import React, { useEffect } from \"react\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport {\n  UPDATE_GENRES,\n  UPDATE_SEARCH_GENRE,\n} from \"../../utils/actions\";\nimport { QUERY_GENRES } from \"../../utils/queries\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\n\n// function GenreMenu({ setGenre }) {\nfunction GenreMenu() {\n  //   const { data: genreData } = useQuery(QUERY_GENRES);\n  //   const genres = GenreData?.genres || [];\n\n  const [state, dispatch] = useStoreContext();\n\n  const { genres, searchGenre } = state;\n  //Now when we use this component, we immediately call upon the useStoreContext() Hook to retrieve the current state from the global state object and the dispatch() method to update state. Because we only need the genres array out of our global state, we simply destructure it out of state so we can use it to provide to our returning JSX.\n  const { loading, data: genreData } = useQuery(QUERY_GENRES);\n\n  useEffect(() => {\n    // if genreData exists or has changed from the response of useQuery, then run dispatch()\n    if (genreData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for genres to\n      dispatch({\n        type: UPDATE_GENRES,\n        genres: genreData.genres,\n      });\n      genreData.genres.forEach((genre) => {\n        idbPromise(\"genres\", \"put\", genre);\n      });\n    } else if (!loading) {\n      idbPromise(\"genres\", \"get\").then((genres) => {\n        dispatch({\n          type: UPDATE_GENRES,\n          genres: genres,\n        });\n      });\n    }\n\n    // return () => {\n    //   dispatch({\n    //     type: UPDATE_CURRENT_GENRE,\n    //     currentGenre: {},\n    //   });\n    // };\n  }, [genreData, loading, dispatch]);\n\n  // Now when this component loads and the response from the useQuery() Hook returns, the useEffect() Hook notices that genreData is not undefined anymore and runs the dispatch() function, setting our genre data to the global state!\n\n  // Remember how the useEffect() Hook works. It is a function that takes two arguments, a function to run given a certain condition, and then the condition. In this case, the function runs immediately on load and passes in our function to update the global state and then the data that we're dependent on, genreData and dispatch. Now, genreData is going to be undefined on load because the useQuery() Hook isn't done with its request just yet, meaning that if statement will not run.\n\n  // But the beauty of the useEffect() Hook is that it not only runs on component load, but also when some form of state changes in that component. So when useQuery() finishes, and we have data in genreData, the useEffect() Hook runs again and notices that genreData exists! Because of that, it does its job and executes the dispatch() function.\n\n  const handleClick = (genre) => {\n    dispatch({\n      type: UPDATE_SEARCH_GENRE,\n      genre\n    });\n  };\n\n  return (\n    <div className=\"genre-menu\">\n      <ButtonGroup variant=\"text\" aria-label=\"text primary button group\">\n      {genres.map((item) => (<Button className={ item.name === searchGenre ? 'selected' : null } key={item._id}\n            onClick={() => {\n              handleClick(item.name);\n            }}>\n            {item.name}\n          </Button>\n      ))}\n      </ButtonGroup>\n    </div>\n  );\n}\nexport default GenreMenu;\n","import React, { useEffect } from \"react\";\nimport SearchBar from \"material-ui-search-bar\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { QUERY_SEARCH, QUERY_ARTIST_BY_GENRE } from \"../../utils/queries\";\nimport SearchResults from \"../SearchResults\";\nimport GenreMenu from \"../GenreMenu\";\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_SEARCH_TERM, UPDATE_SEARCH_LOADING, UPDATE_SEARCH_RESULTS } from \"../../utils/actions\";\n\nfunction Search () {\n    const apolloClient = useApolloClient();\n    const [state, dispatch] = useStoreContext();\n    let timeoutId;\n    const { searchGenre, searchTerm } = state;\n\n    const updateSearchTerm = (term) => {\n        clearTimeout(timeoutId);\n\n        if (!term) {\n            dispatch({\n                type: UPDATE_SEARCH_TERM,\n                searchTerm: ''\n              });\n\n            return;\n        }\n\n        timeoutId = setTimeout(() => {\n            dispatch({\n                type: UPDATE_SEARCH_TERM,\n                searchTerm: term,\n              });\n        }, 150);\n    };\n\n    useEffect(() => {\n        let query, variables;\n\n        if (searchGenre) {\n            query = QUERY_ARTIST_BY_GENRE;\n            variables = { genre: searchGenre };\n        } else if (searchTerm) {\n            query = QUERY_SEARCH;\n            variables = { term: searchTerm };\n        } else {\n            dispatch({\n                type: UPDATE_SEARCH_RESULTS,\n                results: null\n            });\n\n            return;\n        }\n\n        dispatch({\n            type: UPDATE_SEARCH_LOADING,\n            loading: true\n        });\n\n        apolloClient\n                .query({ query, variables })\n                .then(r => {\n                    let results;\n\n                    if (query === QUERY_ARTIST_BY_GENRE) {\n                        results = r.data.artistsByGenre;\n                    } else {\n                        results = r.data.search;\n                    }\n\n                    dispatch({\n                        type: UPDATE_SEARCH_RESULTS,\n                        results\n                    });\n                });\n\n    }, [searchGenre, searchTerm]);\n\n    return (\n        <>\n            <div className=\"search-bar\">\n                <SearchBar\n                    value={searchTerm}\n                    onChange={updateSearchTerm}\n                    onCancelSearch={() => updateSearchTerm(null)} />\n            </div>\n\n            <GenreMenu />\n\n            <SearchResults />\n        </>\n    )\n};\n\nexport default Search;","import React from \"react\";\nimport Search from \"../components/Search\";\n\n\nconst Home = () => {\n  return (\n    <div className=\"home-page\">\n      <div className=\"hero\">\n        <h1>Listen | Connect | Support</h1>\n        <h3>Listen to new music while directly supporting the artists who create it</h3>\n        <Search />\n      </div>\n    </div>\n\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React from \"react\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\n\nconst CartItem = ({ item }) => {\n  const [, dispatch] = useStoreContext();\n  // This component currently gets all of its data as props passed down from Cart. That won't change, but now CartItem will also update the global state to adjust item quantities. Note that we only destructured the dispatch() function from the useStoreContext Hook, because the CartItem component has no need to read state.\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n    \n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n    \n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt=\"\" />\n      </div>\n      <div>\n        <div>\n          {item.title}, ${item.price}\n        </div>\n        <div>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n            />\n            {/* This will also clear up the error that React was throwing earlier, because the onChange handler means that the value of this element can now potentially change and is no longer read-only. Test this out in the browser by adding an item to the cart and then typing a new number in the <input> element. Doing so will automatically update the total dollar amount, because the parent Cart component re-renders whenever the global state is updated. */}\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n\n// 0.chunk.js:45521 Warning: Failed prop type: You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.\n//     in input (at CartItem/index.js:16)\n//     in div (at CartItem/index.js:14)\n//     in div (at CartItem/index.js:12)\n//     in div (at CartItem/index.js:5)\n//     in CartItem (at Cart/index.js:42)\n//     in div (at Cart/index.js:40)\n//     in div (at Cart/index.js:36)\n//     in Cart (at Detail.js:109)\n//     in Detail (created by Context.Consumer)\n//     in Route (at App.js:39)\n//     in Switch (at App.js:34)\n//     in StoreProvider (at App.js:32)\n//     in div (at App.js:31)\n//     in Router (created by BrowserRouter)\n//     in BrowserRouter (at App.js:30)\n//     in ApolloProvider (at App.js:29)\n//     in App (at src/index.js:9)\n//     in StrictMode (at src/index.js:8)\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport \"./style.css\";\nimport { QUERY_CHECKOUT } from \"../../utils/queries\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nconst stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise(\"cart\", \"get\");\n      dispatch({ type: ADD_MULTIPLE_TO_CART, songs: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n  // You may wonder what happens if there's nothing to retrieve from the cached object store and state.cart.length is still 0. Does this useEffect() function just continuously run because of that? Well, it could very easily do that if we neglect to pass the state.cart.length value into useEffect()'s dependency array. That's the whole point of the dependency array. We list all of the data that this useEffect() Hook is dependent on to execute. The Hook runs on load no matter what, but then it only runs again if any value in the dependency array has changed since the last time it ran.\n  useEffect(() => {\n    // console.log(\"Data:\", data);\n    if (data) {\n      stripePromise.then((res) => {\n        // console.log(\"res:\", res);\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n  // The Stripe documentation warns that you shouldn't rely on the success_url alone for fulfilling purchases. Malicious users could visit /success directly without paying for anything, or users might close the browser tab before Stripe is able to redirect to your website. Implementing a more robust solution is beyond the scope of this lesson, but it's worth reading over Stripe's documentation on confirming a successful payment to see what else is possible.\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const songIds = [];\n  \n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        songIds.push(item._id);\n      }\n      // console.log(\"songIds in cart:\", songIds);\n      getCheckout({\n        variables: { songs: songIds }\n      });      \n    });\n    getCheckout({\n      variables: { songs: songIds }\n    });      \n  }\n  // Unfortunately, we can't call useQuery(QUERY_CHECKOUT) in the click handler function. The useQuery Hook is meant to run when a component is first rendered, not at a later point in time based on a user action like a button click. Apollo provides another Hook for this exact situation. The useLazyQuery Hook can be declared like any other Hook but won't actually execute until you tell it to. Let's implement this new Hook to call QUERY_CHECKOUT.\n  \n  //       // You should always wrap emojis (like the shopping cart icon) in a <span> element that includes role and aria-label attributes. Doing so will help screen readers understand the context of the emoji.\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React, { useEffect, useState } from \"react\";\nimport { idbPromise } from \"../utils/helpers\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_SONGS,\n} from \"../utils/actions\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { QUERY_SONGS } from \"../utils/queries\";\nimport spinner from \"../assets/spinner.gif\";\nimport Cart from \"../components/Cart\";\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentSong, setCurrentSong] = useState({});\n\n  const { loading, data } = useQuery(QUERY_SONGS);\n\n  // const { songs } = state;\n  const { songs, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (songs.length) {\n      setCurrentSong(songs.find((song) => song._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_SONGS,\n        songs: data.songs,\n      });\n\n      data.songs.forEach((song) => {\n        idbPromise(\"songs\", \"put\", song);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise(\"songs\", \"get\").then((indexedSongs) => {\n        dispatch({\n          type: UPDATE_SONGS,\n          songs: indexedSongs,\n        });\n      });\n    }\n  }, [songs, data, loading, dispatch, id]);\n\n  // const addToCart = () => {\n  //   dispatch({\n  //     type: ADD_TO_CART,\n  //     song: { ...currentSong, purchaseQuantity: 1 }\n  //   });\n  // };\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise(\"cart\", \"put\", {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        song: { ...currentSong, purchaseQuantity: 1 },\n      });\n      // if song isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise(\"cart\", \"put\", { ...currentSong, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentSong._id,\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentSong._id` to locate what to remove\n    idbPromise(\"cart\", \"delete\", { ...currentSong });\n  };\n\n  return (\n    <>\n      {currentSong ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Songs</Link>\n\n          <h2>{currentSong.title}</h2>\n\n          <p>{currentSong.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentSong.price}{\" \"}\n            <button onClick={addToCart}>Add to cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentSong._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n          <audio className=\"audio\" controls>\n            <source src={`${currentSong.song_url}`} type=\"audio/mpeg\" />\n          </audio>\n          <img src={`/images/${currentSong.image}`} alt={currentSong.title} />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n\n// So again, we go through all of the motions of getting the global state, querying data using Apollo and destructuring the songs out of state. But what's going one with the useEffect() Hook? And why do we still have local state? Why isn't the currentSong part of the global state?\n\n// To answer the first question, the useEffect() Hook here has to check for a couple of things. It first checks to see if there's data in our global state's songs array. If there is, we use it to figure out which song is the current one that we want to display. It does this finding the one with the matching _id value that we grabbed from the useParams() Hook. But what happens if we don't have any songs in our global state object? What happens if someone just sent you this song's URL and this is the first time you've loaded this application?\n\n// If that's the case, then you wouldn't have any songs saved in global state just yet. The useEffect() Hook is set up so that if we don't, we'll use the song data that we returned from the useQuery() Hook to set the song data to the global state object. When that's complete, we run through this all over again. But this time, there is data in the songs array, and then we run setCurrentSong() to display a single song's data.\n\n// This is why there are so many items in the second argument of the useEffect() Hook. The Hook's functionality is dependent on them to work and only runs when it detects that they've changed in value! This is known as the dependency array.\n\n// It's a lot of back and forth, but it works! But what about our second question? Why are we saving the current song locally and not to the global state?\n\n// This is one of those cases where saving a single song to the global state object doesn't actually benefit us in any way, shape, or form. The single song's data will only be used in this specific component at this specific moment. This is the same reason why we don't worry about saving form entry data from the login or signup forms to global state; it only needs to exist when we're using those components!\n\n// Okay, now we'll update the useEffect() Hook to check if we have data returning from a global state and stored in songs. Then we'll account for the following possibilities:\n\n// If yes, let's get the current song and save it to the local state currentSong.\n\n// If no, we don't have data in global state, let's check whether we retrieved data from the server using the useQuery() Hook. If yes, save that data to global state and to the song object store in IndexedDB, and we'll run the useEffect() Hook over again to make that first if statement run.\n\n// If no, we don't have data in global state and we don't have a connection to the server, the loading data will be undefined. We'll then go to the song object store in IndexedDB and retrieve the data from there to provide the global state object.\n\n// If this seems like a lot, remember that you'll be making fantastic use of the useEffect() Hook React provides. It will constantly check the dependency array for a change in any of the values listed in it and continue to run the useEffect() Hook's callback function until that data stops changing and you're good to go.\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ARTIST_LOGIN = gql`\n  mutation artistLogin($email: String!, $password: String!) {\n    artistLogin(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($songs: [ID]!) {\n    addOrder(songs: $songs) {\n      purchaseDate\n      songs {\n        _id\n        title\n        description\n        price\n        genre {\n          name\n        } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!, $bio: String, $avatar: String) {\n    addUser(username: $username, email: $email, password: $password, bio: $bio, avatar: $avatar) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ARTIST = gql`\n  mutation addArtist($artistName: String!, $email: String!, $password: String!, $genre: String!, $bio: String, $socialMedia: String, $avatar: String) {\n    addArtist(artistName: $artistName, email: $email, password: $password, genre: $genre, bio: $bio, socialMedia: $socialMedia, avatar: $avatar) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n//adds User to Artist\nexport const ADD_FOLLOW = gql`\nmutation addFollow($artistId:ID!) {\n  addFollow(artistId: $artistId) {\n    followers{\n      username\n      _id\n    }\n  }\n}\n`;\n//adds Artist to User\nexport const ADD_FOLLOWER = gql`\nmutation addFollower($userId: ID!){\n  addFollower(userId: $userId) {\n    follows{\n      artistName\n      _id\n    }\n  }\n}\n`","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN, ARTIST_LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '', accountType: '' });\n  const [login, {error}] = useMutation(LOGIN);\n  const [artistLogin] = useMutation(ARTIST_LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      if(formState.acctType === 'user')\n      {\n        const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n        const token = mutationResponse.data.login.token;\n        Auth.login(token);\n      }\n      else if(formState.acctType === 'artist')\n      {\n        const mutationResponse = await artistLogin({ variables: { email: formState.email, password: formState.password } })\n        const token = mutationResponse.data.artistLogin.token;\n        Auth.login(token);\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n            <label htmlFor=\"type\">Account Type:</label>\n            <input\n              placeholder=\"user or artist\"\n              name=\"acctType\"\n              type=\"acctType\"\n              id=\"type\"\n              onChange={handleChange}\n            />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport Auth from \"../utils/auth\";\nimport { ADD_USER, ADD_ARTIST } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ acctType: \"\", username: \"\", email: \"\", password: \"\", genre: \"\", bio: \"\", picture: \"\", social: \"\", color: \"\" });\n  const [addUser] = useMutation(ADD_USER);\n  const [addArtist] = useMutation(ADD_ARTIST);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    let mutationResponse = \"\";\n    let token = \"\";\n    if(formState.acctType === \"user\")\n    {\n      mutationResponse = await addUser({\n        variables: {\n          // accountType: formState.acctType,\n          username: formState.username,\n          email: formState.email,\n          password: formState.password,\n          bio: formState.bio,\n          avatar: formState.picture,\n          // firstName: formState.firstName,\n          // lastName: formState.lastName,\n        },\n      });\n      token = mutationResponse.data.addUser.token;\n    }\n    else if(formState.acctType === \"artist\")\n    {\n      mutationResponse = await addArtist({\n        variables: {\n          // accountType: formState.acctType,\n          artistName: formState.username,\n          email: formState.email,\n          password: formState.password,\n          genre: formState.genre,\n          bio: formState.bio,\n          avatar: formState.picture,\n          socialMedia: formState.social,\n          // firstName: formState.firstName,\n          // lastName: formState.lastName,\n        },\n      });\n      token = mutationResponse.data.addArtist.token;\n    }\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n  // Expecting Account type to change to some alternate form of selection and Genre to change to dropdown.\n  // Account type will need to cause Genre and Social Media Links to appear, if artist is selected.\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n      <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"type\">*Account Type:</label>\n          <input\n            placeholder=\"user or artist\"\n            name=\"acctType\"\n            type=\"acctType\"\n            id=\"type\"\n            onChange={handleChange}\n          />\n      </div>\n      <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"username\">*Username:</label>\n          <input\n            placeholder=\"Username\"\n            name=\"username\"\n            type=\"username\"\n            id=\"username\"\n            onChange={handleChange}\n          />\n        </div>\n        {/* <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div> */}\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">*Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">*Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"genre\">*Genre:</label>\n          <input\n            placeholder=\"country\"\n            name=\"genre\"\n            type=\"genre\"\n            id=\"genre\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"bio\">About Me:</label>\n          <input\n            placeholder=\"Tell us about yourself\"\n            name=\"bio\"\n            type=\"bio\"\n            id=\"bio\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"picture\">Picture:</label>\n          <input\n            placeholder=\"\"\n            name=\"picture\"\n            type=\"picture\"\n            id=\"picture\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"social\">Other Social Media:</label>\n          <input\n            placeholder=\"LinkedIn, Facebook, Twitter, ect.\"\n            name=\"social\"\n            type=\"social\"\n            id=\"social\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React, { useEffect } from \"react\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { QUERY_SONGS } from \"../../utils/queries\";\nimport { UPDATE_SONGS } from \"../../utils/actions\";\nimport spinner from \"../../assets/spinner.gif\";\n\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from '@material-ui/core/CardMedia';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Styles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    padding: \"1rem\",\n    margin: \".5rem\",\n  },\n  details: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  content: {\n    flex: \"1 0 auto\",\n  },\n  cover: {\n    width: 151,\n  },\n  controls: {\n    display: \"flex\",\n    alignItems: \"center\",\n    paddingLeft: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  playIcon: {\n    height: 38,\n    width: 38,\n  },\n  button: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n  },\n}));\n\nconst SongCard = (song) => {\n  const [state, dispatch] = useStoreContext();\nconst { currentArtist } = state;\nconst { title, description, image, price, song_url, tags } = song;\n\nconsole.log(\"currentArtist\", currentArtist);\n\n  // const { image, title, _id, price, artistId, tags, song_url } = props;\n  console.log(\"SongCardArtist\", state.currentArtist);\n  console.log(\"title\", title);\n  // console.log(\"image\", image);\n  // console.log(\"_id\", _id);\n  // console.log(\"price\", price);\n  // console.log(\"artistId\", artistId);\n  console.log(\"description\", description);\n  // console.log(\"song_url\", song_url);\n  // console.log(\"tags\", tags);\n\n  const theme = useTheme();\n  const classes = Styles();\n\n  return (\n    <div>\n      <Card className={classes.root}>\n        <div className={classes.details}>\n          <CardContent className={classes.content}>\n            <Typography component=\"h5\" variant=\"h5\">\n              {title}\n            </Typography>\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              Title: {title}\n              <br></br>\n              Description: {description}\n              <br></br>\n              Price: {price}\n              <br></br>\n              Song_url: {song_url}\n              <br></br>\n              Tags: {tags}\n            </Typography>\n          </CardContent>\n          <div className={classes.controls}>\n            <IconButton aria-label=\"previous\">\n              {theme.direction === \"rtl\" ? (\n                <SkipNextIcon />\n              ) : (\n                <SkipPreviousIcon />\n              )}\n            </IconButton>\n            <IconButton aria-label=\"play/pause\">\n              <PlayArrowIcon className={classes.playIcon} />\n            </IconButton>\n            <IconButton aria-label=\"next\">\n              {theme.direction === \"rtl\" ? (\n                <SkipPreviousIcon />\n              ) : (\n                <SkipNextIcon />\n              )}\n            </IconButton>\n          </div>\n        </div>\n        <CardMedia\n          className={classes.cover}\n          image=\"../../assets/placeholder-cat.jpg\"\n          title=\"Live from space album cover\"\n        />\n        <Button className={classes.button}>buy</Button>\n      </Card>\n    </div>\n  );\n}\n\nexport default SongCard;\n","import React, { useEffect } from \"react\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport SongCard from \"../SongCard\";\nimport { QUERY_SONGS } from \"../../utils/queries\";\nimport { UPDATE_SONGS } from \"../../utils/actions\";\nimport spinner from \"../../assets/spinner.gif\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction SongTableSimple() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentArtist } = state;\n\n  //use when data is received\n  const { loading, data } = useQuery(QUERY_SONGS);\nconsole.log(\"data\", data);\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_SONGS,\n        songs: data.songs,\n      });\n\n      // but let's also take each song and save it to IndexedDB using the helper function\n      data.songs.forEach((song) => {\n        idbPromise(\"songs\", \"put\", song);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `songs` store\n      idbPromise(\"songs\", \"get\").then((songs) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_SONGS,\n          songs: songs,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterSongs() {\n    return state.songs.filter((song) => song.artistId === currentArtist._id);\n  }\n  console.log(\"filterSongs\", filterSongs());\n  console.log(\"currentArtist._id\", currentArtist._id);\n\n  const artistSongs = state.songs.filter(\n    (song) => song.artistId === currentArtist._id\n  );\n\n  console.log(\"artistSongs\", artistSongs);\n\n  const classes = useStyles();\n\n  function createData(playBtn, name, album, playcount, purchase) {\n    return { playBtn, name, album, playcount, purchase };\n  }\n  // console.log(\"SongTableArtist\", currentArtist);\n  // console.log(\"title\", title);\n  // console.log(\"image\", image);\n  // console.log(\"_id\", _id);\n  // console.log(\"price\", price);\n  // console.log(\"artistId\", artistId);\n  // console.log(\"description\", description);\n  // console.log(\"song_url\", song_url);\n  // console.log(\"tags\", tags);\n\n  function buyClick() {\n    console.log(\"buy clicked\");\n    //add to cart function here\n  }\n\n  function playClick() {\n    console.log(\"play clicked\");\n  }\n\n  const rows = artistSongs.map((song) => {\n    return createData(\n      <Button>\n        <PlayArrowIcon onClick={playClick}></PlayArrowIcon>\n      </Button>,\n      song.title,\n      1,\n      2,\n      <Button onClick={buyClick}>Buy</Button>\n    );\n  });\n\n  console.log(\"rows\", rows);\n\n  //   const rows = item.map((song) => {\n  //     return createData(\n  //       <Button>\n  //         <PlayArrowIcon onClick={playClick}></PlayArrowIcon>\n  //       </Button>,\n  //       song.title,\n  //       1,\n  //       2,\n  //       <Button onClick={buyClick}>Buy</Button>\n  //     );\n  //   });\n\n  //   console.log(rows);\n\n  return (\n    <div>\n    <h2>{currentArtist.artistName}'s Songs:</h2>\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead align=\"right\">\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell align=\"left\">Title</TableCell>\n              <TableCell align=\"right\">Album</TableCell>\n              <TableCell align=\"right\">Playcount</TableCell>\n              <TableCell align=\"right\">Purchase</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow key={row.name}>\n                {/* <TableCell component=\"th\" scope=\"row\">\n                                  {row.name}\n                              </TableCell> */}\n                <TableCell align=\"center\">{row.playBtn}</TableCell>\n                <TableCell align=\"left\">{row.name}</TableCell>\n                <TableCell align=\"right\">{row.album}</TableCell>\n                <TableCell align=\"right\">{row.playcount}</TableCell>\n                <TableCell align=\"right\">{row.purchase}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* <h2>Songs Sent to SongCard:</h2> */}\n      \n      {artistSongs.length ? (\n        <div className=\"flex-row\">\n          {filterSongs().map((song) => (\n            <SongCard\n              key={song._id}\n              _id={song._id}\n              title={song.title}\n              artistId={song.artistId}\n              description={song.description}\n              image={song.image}\n              price={song.price}\n              song_url={song.song_url}\n              tags={song.tags}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>{currentArtist.artistName} hasn't added any songs yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default SongTableSimple;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"nav-link\">\n            <Link to=\"/orderHistory\">\n              Order History\n              {/* Change to view Profile? */}\n            </Link>\n          </li>\n          <li className=\"nav-link\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"nav flex-row\">\n          <li className=\"nav-link\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"nav-link\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <div id='bars'>\n            <div className='bar'></div>\n            <div className='bar'></div>\n            <div className='bar'></div>\n            <div className='bar'></div>\n            <div className='bar'></div>\n            <div className='bar'></div>\n            <div className='bar'></div>\n            <div className='bar'></div>\n            <div className='bar'></div>\n            <div className='bar'></div>\n          </div>\n          <div className='name'><span id=\"fair\">fair</span><span id=\"streem\">streem</span></div>\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Songs\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.songs.map(({ _id, image, title, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/songs/${_id}`}>\n                        <img\n                          alt={title}\n                          src={`/images/${image}`}\n                        />\n                        <p>{title}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise(\"cart\", \"get\");\n      const songs = cart.map((item) => item._id);\n      console.log(\"success songs to saveOrder:\", songs);\n\n      if (songs.length) {\n        const data  = await addOrder({ variables: { songs } });\n        console.log(\"data\", data);\n        const songData = data.songs;\n  \n        console.log(\"songData in saveOrder:\", songData);\n\n        songData.forEach((item) => {\n          idbPromise(\"cart\", \"delete\", item);\n        });\n      }\n      setTimeout(function () {\n        window.location.assign(\"/\");\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the homepage</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\n//make mutation\n// import { ADD_COMMENT } from '../../utils/mutations';\n\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\n\n\n\n\n\n\n export default function CommentForm(){\n\n    const [commentText, setText] = useState('');\n    const [characterCount, setCharacterCount] = useState(0);\n\n    // const addComment = useMutation(ADD_COMMENT)\n\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n        try {\n            // add thought to database. the thoughtText comes from useState hook that is updated in handleChange()\n            // await addComment({\n            //   variables: { commentText }\n            // });\n        \n            // clear form value\n            setText('');\n            setCharacterCount(0);\n          } catch (e) {\n            console.error(e);\n          }\n    };\n\n    const handleChange = event => {\n        if (event.target.value.length <= 280) {\n            setText(event.target.value);\n            setCharacterCount(event.target.value.length);\n        }\n    };\n\n    return(\n        <Grid container component={Paper}  >\n            \n            <Grid item xs={12}>\n            <p className={characterCount === 280 ? 'text-error' : ''}>\n                Character Count: {characterCount}/280 \n            </p>\n            </Grid>\n\n            \n            <form onSubmit={handleFormSubmit}>\n            <Grid item xs={12}>\n                <textarea\n                   placeholder=\"What do you think?\"\n                   value={commentText}\n                   \n                   onChange={handleChange}\n                >\n                </textarea>\n                </Grid>\n                \n                <Button type=\"submit\">\n                    Submit\n                </Button>\n            </form>\n            \n            </Grid>\n    )\n\n }\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    \n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function CommentList() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        \n        <Typography variant=\"h5\" component=\"h2\">\n          (Created at)User says...\n        </Typography>\n       \n        <Typography variant=\"body2\" component=\"p\">\n            {/* data.commentText */}\n          I like this artist, rock song #999 is my favorite!\n          I like this artist, rock song #999 is my favorite!\n          I like this artist, rock song #999 is my favorite!\n          I like this artist, rock song #999 is my favorite!\n          <br />\n         \n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">reply</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_FOLLOW, ADD_FOLLOWER } from '../../utils/mutations'\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nimport Auth from '../../utils/auth'\n\nimport Button from '@material-ui/core/Button'\n\n\n\n\nexport default function LikeButton() {\n    const [state, dispatch] = useStoreContext();\n\n    const listenerId = Auth.getProfile().data._id || null\n\n    const addFollow = useMutation(ADD_FOLLOW)\n    const addFollower = useMutation(ADD_FOLLOWER)\n\n        //add Artist to User\n        async function addFollowFunction()  {\n        try {\n            await addFollow({\n                variables: { artistId: state.currentArtist._id }\n            })\n        }\n        catch (e) {\n            console.log(e);\n\n        }\n    }\n\n        //add User to Artist\n        async function addFollowerFunction() {\n        try {\n            await addFollower({\n                variables: { userId: listenerId }\n            })\n        } catch (e) {\n            console.log(e);\n        }\n\n    }\n\n\n    return (\n        <Button onClick={()=>{\n            console.log(\"CURRENT ARTIST\",state.currentArtist);\n            addFollowFunction();\n            addFollowerFunction()\n            \n            \n        }}>Like</Button>\n    )\n}\n","import React, { useEffect } from \"react\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useParams } from \"react-router-dom\";\nimport { UPDATE_ARTISTS, UPDATE_CURRENT_ARTIST } from \"../utils/actions\";\nimport { QUERY_ARTISTS } from \"../utils/queries\";\nimport { idbPromise } from \"../utils/helpers\";\nimport spinner from \"../assets/spinner.gif\";\nimport Auth from '../utils/auth'\n\nimport Grid from \"@material-ui/core/Grid\";\n// import Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\n\nimport SongTableSimple from \"../components/SongTableSimple\";\nimport CommentForm from '../components/CommentForm'\nimport CommentList from '../components/CommentList'\nimport LikeButton from '../components/LikeButton'\n\nfunction ArtistProfile() {\n  const [state, dispatch] = useStoreContext();\n  //useParams retrieves username from URL\n  const { artistId } = useParams();\n\n  const { loading, data } = useQuery(QUERY_ARTISTS);\n\n  const currentArtist = state.artists.find((artist) => artist._id === artistId);\n\n  useEffect(() => {\n    if (data && !currentArtist) {\n      dispatch({\n        type: UPDATE_ARTISTS,\n        artists: data.artists,\n      });\n      data.artists.forEach((artist) => {\n        idbPromise(\"artists\", \"put\", artist);\n      });\n    } else if (currentArtist) {\n      dispatch({\n        type: UPDATE_CURRENT_ARTIST,\n        currentArtist,\n      });\n      // get cache from idb\n    } else if (!loading) {\n      idbPromise(\"artists\", \"get\").then((indexedArtists) => {\n        dispatch({\n          type: UPDATE_ARTISTS,\n          artists: indexedArtists,\n        });\n      });\n    }\n\n    return () => {\n      dispatch({\n        type: UPDATE_CURRENT_ARTIST,\n        currentArtist: {},\n        // this clears the currenArist object when leaving page(** this mimics \"component unmount\" **)\n      });\n    };\n  }, [loading, currentArtist, dispatch, data, artistId]);\n\n  return (\n    <>\n      {currentArtist ? (\n        <div>\n          <Grid container justify=\"center\">\n            {/* {artist.artistName} */}\n            <h1>\n              {currentArtist.artistName}{\" \"}\n              <span>\n                <Button>like</Button>\n                <LikeButton></LikeButton>\n              </span>{\" \"}\n            </h1>\n          </Grid>\n\n          <Grid container justify=\"center\" spacing={2}>\n            <Grid item md={6}>\n              <img alt=\"artist\" src={currentArtist.avatar} />\n            </Grid>\n\n            <Grid item md={6}>\n              <p>{currentArtist.bio}</p>\n            </Grid>\n          </Grid>\n\n          <Grid container>\n            {/* <SongCard>\n              {\" \"} */}\n            <SongTableSimple />\n          </Grid>\n          <Grid container justify=\"center\">\n            <h1>COMMENT FEED</h1>\n           <CommentForm></CommentForm>\n           <CommentList></CommentList>\n           <CommentList></CommentList>\n\n          </Grid>\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </>\n  );\n}\n\nexport default ArtistProfile;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useParams } from \"react-router-dom\";\n\nimport SongCard from \"../components/SongCard\";\n\nimport { QUERY_SONGS } from \"../utils/queries\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { UPDATE_SONGS, UPDATE_CURRENT_SONG } from \"../utils/actions\";\n\nconst SongDetail = () => {\n  const [state, dispatch] = useStoreContext();\n  const { songId } = useParams();\n  // const [currentSong, setCurrentSong] = useState({});\n\n  // const { data: songData } = useQuery(QUERY_SONGS);\n  const { loading, data } = useQuery(QUERY_SONGS);\n\n  const currentSong = state.songs.find(song => song._id === songId);\n\n  // const songs = songData?.songs || [];\n\n  useEffect(() => {\n    if (data && !currentSong) {\n      dispatch({\n        type: UPDATE_SONGS,\n        songs: data.songs,\n      })\n     } else if (currentSong) {\n      dispatch({\n        type: UPDATE_CURRENT_SONG,\n        currentSong\n      });\n     }\n\n    return () => {\n      dispatch({\n        type: UPDATE_CURRENT_SONG,\n        currentSong: {}\n    });\n  }\n}, [loading, currentSong, dispatch, data]);\n\n  return (\n    <main>\n      <div className=\"m-5\">\n        {currentSong ? <SongCard {...currentSong} /> : <h2>Loading...</h2>}\n      </div>\n    </main>\n  );\n};\n\nexport default SongDetail;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport SongListByArtist from \"./components/SongListByArtist\"\nimport Nav from \"./components/Nav\";\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport Success from \"./pages/Success\";\nimport ArtistProfile from \"./pages/ArtistProfile\";\nimport SongDetail from \"./pages/SongDetail\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/songs/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/artists/:artistId\" component={ArtistProfile} />\n              {/* <Route exact path=\"/artists/:artistName/:artistId/songs\" component={SongListByArtist} /> */}\n              <Route exact path=\"/artists/:artistName/:artistId/songs/:songId\" component={SongDetail} />\n\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n// Did you notice how we use the <StoreProvider> to wrap all of our components? Everything between those JSX tags are considered the children of <StoreProvider>; that's why it was so important that we had ...props in the definition of our StoreProvider function!\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}